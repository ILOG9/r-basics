1+1
3*5
cclearPushBack()
clearPushBack()
git
git --help
install.packages("tidyverse", dependencies = TRUE)
install.packages('magic', dep = TRUE)
install.packages('caret', dep=TRUE)
# The following two commands remove any previously installed H2O packages for R.
if ("package:h2o" %in% search()) { detach("package:h2o", unload=TRUE) }
if ("h2o" %in% rownames(installed.packages())) { remove.packages("h2o") }
# Next, we download packages that H2O depends on.
pkgs <- c("RCurl","jsonlite")
for (pkg in pkgs) {
if (! (pkg %in% rownames(installed.packages()))) { install.packages(pkg) }
}
# Now we download, install and initialize the H2O package for R.
install.packages("h2o", type="source", repos="http://h2o-release.s3.amazonaws.com/h2o/rel-yates/4/R")
# Finally, let's load H2O and start up an H2O cluster
library(h2o)
h2o.init()
cclose()
setwd("~/Curso vision artificial deep-machine learning en R/apuntes/assets/MNIST")
setwd("~/Curso vision artificial deep-machine learning en R/apuntes")
#
train <- read.csv("assets/MNIST-OCR/train.csv", header=TRUE)
View(train)
#
unique(train$labe)
#
unique(train$label)
names(train)
dim(train)
# mfrow = subidivison del plot en 4 filas y tres columnas
# pty = pintar
# mar = pinta los cuatro margenes
# xart = sin eje de x ni eje de Y
,par(mfrow = c(4,3), pty = 's', mar = c(1,1,1,1), xart = 'n', yaxt = 'n')
# contiene el valor del pixel de 0 a 255
train <- read.csv("assets/MNIST-OCR/train.csv", header=TRUE)
View(train)
# Revision simple sobre la data
unique(train$label)
names(train)
# 42000 registros y 785 variables
dim(train)
# 42000 registros y 785 variables
dim(train)
# Transformamos los datos  auna matriz
train <- as.matrix(train)
colors <- c('white','black')
cus_col <- colorRampPalette(colors = colors)
# mfrow = subidivison del plot en 4 filas y tres columnas
# pty = pintar
# mar = pinta los cuatro margenes
# xart = sin eje de x ni eje de Y
,par(mfrow = c(4,3), pty = 's', mar = c(1,1,1,1), xaxt = 'n', yaxt = 'n')
# mfrow = subidivison del plot en 4 filas y tres columnas
# pty = pintar
# mar = pinta los cuatro margenes
# xart = sin eje de x ni eje de Y
,par(mfrow = c(4,3), pty = 's', mar = c(1,1,1,1), xaxt = 'n', yaxt = 'n')
# mfrow = subidivison del plot en 4 filas y tres columnas
# pty = pintar
# mar = pinta los cuatro margenes
# xart = sin eje de x ni eje de Y
par(mfrow = c(4,3), pty = 's', mar = c(1,1,1,1), xaxt = 'n', yaxt = 'n')
for (di in 0:9) {
print(di)
all_img[di+1,] <- apply(train[train[,1] == di, -1], 2,sum)
}
# array que contiene los 10 posibles valores
all_img <- array(dim = c(10,28,28))
for (di in 0:9) {
print(di)
all_img[di+1,] <- apply(train[train[,1] == di, -1], 2,sum)
}
for (di in 0:9) {
print(di)
all_img[di+1,] <- apply(train[train[,1] == di, -1], 2,sum)
all_img[di+1,] <- all_img[di+1,]/max(all_img[di+1,])*255
z <- array(all_img[di+1,], dim = c(28,28))
z <- z[,28:1]
image(1:28,1:28,z,main = di,col = cus_col(256))
}
all_img[di+1,] <- apply(train[train[,1] == di, -1], 2,sum)
# contiene el valor del pixel de 0 a 255
train <- read.csv("assets/MNIST-OCR/train.csv", header=TRUE)
# Transformamos los datos  auna matriz
train <- as.matrix(train)
cus_col <- colorRampPalette(colors = colors)
# mfrow = subidivison del plot en 4 filas y tres columnas
# pty = pintar
# mar = pinta los cuatro margenes
# xart = sin eje de x ni eje de Y
par(mfrow = c(4,3), pty = 's', mar = c(1,1,1,1), xaxt = 'n', yaxt = 'n')
# contiene el valor del pixel de 0 a 255
train <- read.csv("assets/MNIST-OCR/train.csv", header=TRUE)
# Revision simple sobre la data
unique(train$label)
names(train)
# 42000 registros y 785 variables
dim(train)
# Transformamos los datos  auna matriz
train <- as.matrix(train)
colors <- c('white','black')
cus_col <- colorRampPalette(colors = colors)
# mfrow = subidivison del plot en 4 filas y tres columnas
# pty = pintar
# mar = pinta los cuatro margenes
# xart = sin eje de x ni eje de Y
par(mfrow = c(4,3), pty = 's', mar = c(1,1,1,1), xaxt = 'n', yaxt = 'n')
# array que contiene los 10 posibles valores
all_img <- array(dim = c(10,28,28))
for (di in 0:9) {
print(di)
all_img[di+1,] <- apply(train[train[,1] == di, -1], 2,sum)
all_img[di+1,] <- all_img[di+1,]/max(all_img[di+1,])*255
z <- array(all_img[di+1,], dim = c(28,28))
z <- z[,28:1]
image(1:28,1:28,z,main = di,col = cus_col(256))
}
for (di in 0:9) {
print(di)
all_img[di+1,] <- apply(train[train[,1] == di, -1], 2, sum)
all_img[di+1,] <- all_img[di+1,] / max(all_img[di+1,])*255
z <- array(all_img[di+1,], dim = c(28,28))
z <- z[,28:1]
image(1:28,1:28,z,main = di,col = cus_col(256))
}
for (di in 0:9) {
print(di)
all_img[di+1,] <- apply(train[train[,1] == di, -1], 2, sum)
all_img[di+1,] <- all_img[di+1,] / max(all_img[di+1,])*255
z <- array(all_img[di+1,], dim = c(28,28))
z <- z[,28:1]
image(1:28, 1:28, z, main = di, col = cus_col(256))
}
# contiene el valor del pixel de 0 a 255
train <- read.csv("assets/MNIST-OCR/train.csv", header=TRUE)
# Transformamos los datos  auna matriz
train <- as.matrix(train)
colors <- c('white','black')
cus_col <- colorRampPalette(colors = colors)
# mfrow = subidivison del plot en 4 filas y tres columnas
# pty = pintar
# mar = pinta los cuatro margenes
# xart = sin eje de x ni eje de Y
par(mfrow = c(4,3), pty = 's', mar = c(1,1,1,1), xaxt = 'n', yaxt = 'n')
# array que contiene los 10 posibles valores
all_img <- array(dim = c(10, 28*28))
for (di in 0:9) {
print(di)
all_img[di+1,] <- apply(train[train[,1] == di, -1], 2,sum)
all_img[di+1,] <- all_img[di+1,]/max(all_img[di+1,])*255
z <- array(all_img[di+1,], dim = c(28,28))
z <- z[,28:1]
image(1:28,1:28,z,main = di,col = cus_col(256))
}
pdf('train_letters.pdf')
for (i in 1:nrow(train)) {
z <- array(train[i,-1], dim = c(28,28))
# damos vuelta la matriz
z <- z[,28:1]
image(1:28, 1:28, z, main = train[i,1], col = cus_col(256))
print(i)
}
dev.off()
for (di in 0:9) {
print(di)
all_img[di+1,] <- apply(train[train[,1] == di, -1], 2,sum)
all_img[di+1,] <- all_img[di+1,]/max(all_img[di+1,])*255
z <- array(all_img[di+1,], dim = c(28,28))
z <- z[,28:1]
image(1:28,1:28,z,main = di,col = cus_col(256))
}
for (di in 0:9) {
print(di)
all_img[di+1,] <- apply(train[train[,1] == di, -1], 2,sum)
all_img[di+1,] <- all_img[di+1,]/max(all_img[di+1,])*255
z <- array(all_img[di+1,], dim = c(28,28))
z <- z[,28:1]
image(1:28,1:28,z,main = di,col = cus_col(256))
}
for (di in 0:9) {
print(di)
all_img[di+1,] <- apply(train[train[,1] == di, -1], 2,sum)
all_img[di+1,] <- all_img[di+1,]/max(all_img[di+1,])*255
z <- array(all_img[di+1,], dim = c(28,28))
z <- z[,28:1]
image(1:28,1:28,z,main = di,col = cus_col(256))
}
for (di in 0:9) {
print(di)
all_img[di+1,] <- apply(train[train[,1] == di, -1], 2,sum)
all_img[di+1,] <- all_img[di+1,]/max(all_img[di+1,])*255
z <- array(all_img[di+1,], dim = c(28,28))
z <- z[,28:1]
image(1:28,1:28,z,main = di,col = cus_col(256))
}
for (di in 0:9) {
print(di)
all_img[di+1,] <- apply(train[train[,1] == di, -1], 2,sum)
all_img[di+1,] <- all_img[di+1,]/max(all_img[di+1,])*255
z <- array(all_img[di+1,], dim = c(28,28))
z <- z[,28:1]
image(1:28,1:28,z,main = di,col = cus_col(256))
}
